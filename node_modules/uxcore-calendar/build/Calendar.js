'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RcCalendar = require('rc-calendar');
var Datepicker = require('./Picker');
var GregorianCalendar = require('gregorian-calendar');
var DateTimeFormat = require('gregorian-calendar-format');
var RcMonthCalendar = require('rc-calendar/lib/MonthCalendar');
var RcYearCalendar = require('./YearCalendar');
var classSet = require('rc-util').classSet;
var React = require('react');
var ReactDOM = require('react-dom');

var defaultValueLocale = {};
var CalendarLocale = {};
defaultValueLocale['zh-cn'] = require('gregorian-calendar/lib/locale/zh-cn');
defaultValueLocale['en-us'] = require('gregorian-calendar/lib/locale/en-us');
CalendarLocale['zh-cn'] = require('rc-calendar/lib/locale/zh-cn');
CalendarLocale['en-us'] = require('rc-calendar/lib/locale/en-us');

function getGregorianCalendarDate(date, locale) {
    defaultValueLocale[locale].timezoneOffset = -new Date().getTimezoneOffset();
    var value = new GregorianCalendar(defaultValueLocale[locale]);
    value.setTime(new Date(date).valueOf());
    return value;
}

function getCalendarContainer() {
    var c = document.createElement('div');
    c.className = 'uxcore';
    document.body.appendChild(c);
    return c;
}

var Calendar = function (_React$Component) {
    _inherits(Calendar, _React$Component);

    function Calendar(props) {
        _classCallCheck(this, Calendar);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {};
        return _this;
    }

    Calendar.prototype.render = function render() {
        var me = this;
        var p = me.props;
        var formatter = new DateTimeFormat(p.format);
        var calendarOptions = {
            className: p.className,
            style: p.style,
            disabledDate: p.disabledDate,
            showWeekNumber: p.showWeekNumber,
            showToday: p.showToday,
            showTime: p.showTime,
            locale: CalendarLocale[p.locale],
            orient: ['top', 'left'],
            prefixCls: 'kuma-calendar'
        };
        var pickerOptions = {
            disabled: p.disabled,
            formatter: formatter,
            adjustOrientOnCalendarOverflow: false,
            prefixCls: 'kuma-calendar-picker',
            getCalendarContainer: getCalendarContainer
        };

        if (p.value) {
            var value = getGregorianCalendarDate(p.value, p.locale);
            pickerOptions.value = calendarOptions.value = value;
        } else {
            pickerOptions.value = calendarOptions.value = null;
        }

        if (p.defaultValue) {
            var value = getGregorianCalendarDate(p.defaultValue, p.locale);
            calendarOptions.defaultValue = value;
            pickerOptions.defaultValue = value;
        } else {
            var value = getGregorianCalendarDate(new Date().getTime(), p.locale);
            calendarOptions.defaultValue = value;
        }
        if (p.hasTrigger) {
            pickerOptions.trigger = React.createElement('i', { className: 'kuma-icon kuma-icon-calender' });
        }

        var calendar = React.createElement(RcCalendar, calendarOptions);

        function _onChange(v) {
            var date = v.getTime();
            var value = getGregorianCalendarDate(date, p.locale);
            this.props.onSelect(new Date(date), formatter.format(value));
        }

        return React.createElement(
            Datepicker,
            _extends({
                calendar: calendar,
                onChange: _onChange.bind(me)
            }, pickerOptions),
            React.createElement('input', { disabled: me.props.disabled, placeholder: this.props.placeholder, className: 'kuma-calendar-picker-input kuma-input' })
        );
    };

    return Calendar;
}(React.Component);

Calendar.displayName = 'Calendar';
Calendar.defaultProps = {
    format: 'yyyy-MM-dd',
    placeholder: '请选择日期',
    onSelect: function onSelect() {},
    locale: 'zh-cn',
    hasTrigger: false
};
Calendar.propTypes = {
    format: React.PropTypes.string,
    placeholder: React.PropTypes.string,
    onSelect: React.PropTypes.func,
    locale: React.PropTypes.string,
    hasTrigger: React.PropTypes.bool
};

var MonthCalendar = function (_React$Component2) {
    _inherits(MonthCalendar, _React$Component2);

    function MonthCalendar(props) {
        _classCallCheck(this, MonthCalendar);

        var _this2 = _possibleConstructorReturn(this, _React$Component2.call(this, props));

        _this2.state = {};
        return _this2;
    }

    MonthCalendar.prototype.render = function render() {
        var me = this;
        var p = me.props;
        var formatter = new DateTimeFormat(p.format);
        var calendarOptions = {
            className: p.className,
            style: p.style,
            locale: CalendarLocale[p.locale],
            orient: ['top', 'left'],
            prefixCls: 'kuma-calendar'
        };
        var pickerOptions = {
            disabled: p.disabled,
            formatter: formatter,
            adjustOrientOnCalendarOverflow: false,
            prefixCls: 'kuma-calendar-picker',
            getCalendarContainer: getCalendarContainer
        };

        if (p.value) {
            var value = getGregorianCalendarDate(p.value, p.locale);
            pickerOptions.value = calendarOptions.value = value;
        } else {
            pickerOptions.value = calendarOptions.value = null;
        }

        if (p.defaultValue) {
            var value = getGregorianCalendarDate(p.defaultValue, p.locale);
            calendarOptions.defaultValue = value;
        }
        var calendar = React.createElement(RcMonthCalendar, calendarOptions);

        function _onChange(v) {
            var date = v.getTime();
            var value = getGregorianCalendarDate(date, p.locale);
            this.props.onSelect(new Date(date), formatter.format(value));
        }

        return React.createElement(
            Datepicker,
            _extends({
                calendar: calendar,
                onChange: _onChange.bind(me)
            }, pickerOptions),
            React.createElement('input', { disabled: me.props.disabled, placeholder: this.props.placeholder, className: 'kuma-calendar-picker-input kuma-input' })
        );
    };

    return MonthCalendar;
}(React.Component);

MonthCalendar.displayName = 'MonthCalendar';
MonthCalendar.defaultProps = {
    format: 'yyyy-MM',
    placeholder: '请选择月份',
    onSelect: function onSelect() {},
    locale: 'zh-cn'
};
MonthCalendar.propTypes = {
    format: React.PropTypes.string,
    placeholder: React.PropTypes.string,
    onSelect: React.PropTypes.func,
    locale: React.PropTypes.string
};

var YearCalendar = function (_React$Component3) {
    _inherits(YearCalendar, _React$Component3);

    function YearCalendar(props) {
        _classCallCheck(this, YearCalendar);

        var _this3 = _possibleConstructorReturn(this, _React$Component3.call(this, props));

        _this3.state = {};
        return _this3;
    }

    YearCalendar.prototype.render = function render() {
        var me = this;
        var p = me.props;
        var formatter = new DateTimeFormat(p.format);
        var calendarOptions = {
            className: p.className,
            style: p.style,
            locale: CalendarLocale[p.locale],
            orient: ['top', 'left'],
            prefixCls: 'kuma-calendar'
        };
        var pickerOptions = {
            disabled: p.disabled,
            formatter: formatter,
            adjustOrientOnCalendarOverflow: false,
            prefixCls: 'kuma-calendar-picker',
            getCalendarContainer: getCalendarContainer
        };

        if (p.value) {
            var value = getGregorianCalendarDate(p.value, p.locale);
            pickerOptions.value = calendarOptions.value = value;
        } else {
            pickerOptions.value = calendarOptions.value = null;
        }

        if (p.defaultValue) {
            var value = getGregorianCalendarDate(p.defaultValue, p.locale);
            calendarOptions.defaultValue = value;
        }
        var calendar = React.createElement(RcYearCalendar, calendarOptions);

        function _onChange(v) {
            var date = v.getTime();
            var value = getGregorianCalendarDate(date, p.locale);
            this.props.onSelect(new Date(date), formatter.format(value));
        }

        return React.createElement(
            Datepicker,
            _extends({
                calendar: calendar,
                onChange: _onChange.bind(me)
            }, pickerOptions),
            React.createElement('input', { disabled: me.props.disabled, placeholder: this.props.placeholder, className: 'kuma-calendar-picker-input kuma-input' })
        );
    };

    return YearCalendar;
}(React.Component);

YearCalendar.displayName = 'YearCalendar';
YearCalendar.defaultProps = {
    format: 'yyyy',
    placeholder: '请选择年份',
    onSelect: function onSelect() {},
    locale: 'zh-cn'
};
YearCalendar.propTypes = {
    format: React.PropTypes.string,
    placeholder: React.PropTypes.string,
    onSelect: React.PropTypes.func,
    locale: React.PropTypes.string
};

Calendar.MonthCalendar = MonthCalendar;
Calendar.YearCalendar = YearCalendar;

module.exports = Calendar;