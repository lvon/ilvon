/**
 * Created by Samoay on 11/30/14.
 * 本地文件上传
 */
tinymce.PluginManager.add('upload', function (editor) {
    var uploadConfig = editor.settings.uploadConfig;

    function getImageSize(url, callback) {
        var img = document.createElement('img');

        function done(width, height) {
            img.parentNode.removeChild(img);
            callback({width: width, height: height});
        }

        img.onload = function () {
            done(img.clientWidth, img.clientHeight);
        };

        img.onerror = function () {
            done();
        };

        img.src = url;

        var style = img.style;
        style.visibility = 'hidden';
        style.position = 'fixed';
        style.bottom = style.left = 0;
        style.width = style.height = 'auto';

        document.body.appendChild(img);
    }

    function showDialog(sourceImage) {
        var win, data, dom = editor.dom, imgElm = editor.selection.getNode();
        var width, height;

        function recalcSize(e) {
            var widthCtrl, heightCtrl, newWidth, newHeight;

            widthCtrl = win.find('#width')[0];
            heightCtrl = win.find('#height')[0];

            newWidth = widthCtrl.value();
            newHeight = heightCtrl.value();

            if (win.find('#constrain')[0].checked() && width && height && newWidth && newHeight) {
                if (e.control == widthCtrl) {
                    newHeight = Math.round((newWidth / width) * newHeight);
                    heightCtrl.value(newHeight);
                } else {
                    newWidth = Math.round((newHeight / height) * newWidth);
                    widthCtrl.value(newWidth);
                }
            }

            width = newWidth;
            height = newHeight;
        }

        function onSubmitForm() {
            function waitLoad(imgElm) {
                function selectImage() {
                    imgElm.onload = imgElm.onerror = null;
                    //editor.selection.select(imgElm);
                    editor.nodeChanged();
                }

                imgElm.onload = function () {
                    if (!data.width && !data.height) {
                        dom.setAttribs(imgElm, {
                            width: imgElm.clientWidth, height: imgElm.clientHeight
                        });
                    }

                    selectImage();
                };

                imgElm.onerror = selectImage;
            }

            var data = win.toJSON();

            if (data.width === '') {
                data.width = null;
            }

            if (data.height === '') {
                data.height = null;
            }

            if (data.style === '') {
                data.style = null;
            }

            data = {
                src: data.src, alt: data.alt, width: data.width, height: data.height, style: data.style
            };

            editor.undoManager.transact(function () {
                if (!data.src) {
                    if (imgElm) {
                        dom.remove(imgElm);
                        editor.nodeChanged();
                    }

                    return;
                }

                if (!imgElm) {
                    data.id = '__mcenew';
                    editor.selection.setContent(dom.createHTML('img', data));
                    imgElm = dom.get('__mcenew');
                    dom.setAttrib(imgElm, 'id', null);
                } else {
                    dom.setAttribs(imgElm, data);
                }

                waitLoad(imgElm);
            });
        }

        function updateSize() {
            getImageSize(this.value(), function (data) {
                if (data.width && data.height) {
                    width = data.width;
                    height = data.height;

                    win.find('#width').value(width);
                    win.find('#height').value(height);
                }
            });
        }

        width = dom.getAttrib(imgElm, 'width');
        height = dom.getAttrib(imgElm, 'height');

        if (imgElm.nodeName == 'IMG' && !imgElm.getAttribute('data-mce-object')) {
            data = {
                src: dom.getAttrib(imgElm, 'src'), alt: dom.getAttrib(imgElm, 'alt'), width: width, height: height
            };
        } else {
            imgElm = null;
        }

        // General settings shared between simple and advanced dialogs
        var generalFormItems = [
            {
                name: 'src',
                type: 'textbox',
                filetype: 'image',
                label: '图片路径',
                autofocus: true,
                onchange: updateSize
            },
            {
                name: 'alt',
                type: 'textbox',
                label: '图片描述'
            },
            {
                type: 'container',
                label: '图片尺寸',
                layout: 'flex',
                direction: 'row',
                align: 'center',
                spacing: 5,
                items: [
                    {
                        name: 'width', type: 'textbox', maxLength: 4, size: 4, onchange: recalcSize
                    },
                    {type: 'label', text: 'x'},
                    {
                        name: 'height', type: 'textbox', maxLength: 4, size: 4, onchange: recalcSize
                    },
                    {name: 'constrain',
                        type: 'checkbox',
                        checked: true,
                        text: '强制等比例'
                    }
                ]
            }
        ];

        // Simple default dialog
        win = editor.windowManager.open({
            title: '编辑图片',
            width: 400,
            height: 150,
            data: data,
            body: generalFormItems,
            onSubmit: onSubmitForm
        });

        win.find('#src').value(sourceImage.value);
        win.find('#alt').value(sourceImage.title);
        updateSize.call(win.find('#src'))
    }

    function isFunction(obj){
        return Object.prototype.toString.call(obj) == '[object Function]';
    }

    function isString(obj){
        return Object.prototype.toString.call(obj) == '[object String]';
    }

    editor.addButton('upload', {
        icon: 'image',
        tooltip: '上传图片',
        classes: "widget ext-btn ext-btn-small uploader-picture",
        onPostRender: function(){
            var self = this;
            setTimeout(function(){
                var uploader;
                // showDialog({
                //     title: 'result.content.name',
                //     value: 'result.content.downloarUrl'
                // });
                // return;
                if (!uploader){
                    uploader = new Uploader({
                        trigger: self.getEl(),
                        name: uploadConfig.inputName || 'file',
                        action: uploadConfig.actionUrl,
                        data: {'xsrf': 'hash'},
                        multiple: uploadConfig.multiple || false,
                        success: function(response) {
							var result;
							if (isString(response)) {
								try {
									result = JSON.parse(response);
								} catch(e) {
									result = {
										hasError: true
									};
								}
							} else {
								result = response;
							}
                            if (uploadConfig.formatResult && isFunction(uploadConfig.formatResult)){
                                result = uploadConfig.formatResult.call(null, result);
                            }
							if (!result.hasError) {
	                            showDialog({
									title: result.content.name,
									value: result.content.downloarUrl
								});
							} else {
								alert('文件上传失败');
							}
                        },
                        error: function() {
                            if (uploadConfig.errorCallback && isFunction(uploadConfig.errorCallback)){
                                uploadConfig.errorCallback.apply(uploader, Array.prototype.slice.call(arguments));
                            }else{
                                alert('文件上传失败');
                            }
                        },
                        progress: function(event, position, total, percent, files) {
                            if (uploadConfig.progressCallback && isFunction(uploadConfig.progressCallback)){
                                uploadConfig.progressCallback.apply(uploader, Array.prototype.slice.call(arguments));
                            }
                        }
                    });
                }
            }, 1000);
        }
    });
});
