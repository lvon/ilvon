'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./rangy-position');

var _util = require('./util');

var _keycode = require('./keycode');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// import rangy from 'rangy';


var __store = {};
//webkit browsers support 'plaintext-only'
var contentEditableValue = function () {
    var div = document.createElement('div');
    div.setAttribute('contenteditable', 'PLAINTEXT-ONLY');
    return div.contentEditable === 'plaintext-only' ? 'plaintext-only' : true;
}();

var Editor = function (_React$Component) {
    _inherits(Editor, _React$Component);

    function Editor(props) {
        _classCallCheck(this, Editor);

        return _possibleConstructorReturn(this, _React$Component.call(this, props));
    }

    Editor.prototype.componentDidMount = function componentDidMount() {
        // let editor = this.refs.editor;
    };

    Editor.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (nextProps.mentionTarget && (!this.props.mentionTarget || this.props.mentionTarget.t !== nextProps.mentionTarget.t)) {
            this.insertMentionTarget(nextProps.mentionTarget.data);
        }
    };

    Editor.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        if (this.props.children !== nextProps.children) {
            return true;
        }
        return false;
    };

    Editor.prototype.onKeydown = function onKeydown(e) {
        switch (e.keyCode) {
            case _keycode.KEYCODE.UP:
            case _keycode.KEYCODE.DOWN:
                if (this.props.panelVisible) {
                    e.preventDefault();
                }
                break;
            case _keycode.KEYCODE.ENTER:
                // insert br at the end of line
                e.preventDefault();
                if (!this.props.panelVisible) {
                    var editor = this.refs.editor;
                    var sel = rangy.getSelection();
                    var range = sel.getRangeAt(0);

                    // make sure the last element of the editor is br
                    // refer to: http://stackoverflow.com/questions/6023307/dealing-with-line-breaks-on-contenteditable-div
                    if (!editor.lastChild || editor.lastChild.nodeName.toLowerCase() !== 'br') {
                        editor.appendChild(document.createElement('br'));
                    }
                    var nodeBr = document.createElement('br');
                    range.deleteContents();
                    range.insertNode(nodeBr);
                    range.setStartAfter(nodeBr);
                    sel.setSingleRange(range);
                }
                break;
                // default:
                //     this.props.onChange('xxx');
                break;
        }
    };

    Editor.prototype.onKeyup = function onKeyup(e) {
        // if (this.props.panelVisible) {return;}
        switch (e.keyCode) {
            case _keycode.KEYCODE.UP:
            case _keycode.KEYCODE.DOWN:
                if (this.props.panelVisible) {
                    e.preventDefault();
                }
                break;
            case _keycode.KEYCODE.ENTER:
                break;
            default:
                var sel = rangy.getSelection();
                var range = sel.getRangeAt(0);
                if (range.commonAncestorContainer.nodeType === 3) {
                    range.setStart(range.commonAncestorContainer, 0);
                    var originStr = range.toString();
                    var str = (0, _util.parseStrByDelimiter)(originStr, '@');
                    // send str to matcher
                    this.props.matcher(str);
                    if (str) {
                        this.props.setCursorPos(range.getEndClientPos());
                        // set range's start position before delimiter
                        range.setStart(range.commonAncestorContainer, originStr.length - str.length - 1);
                        // save range position
                        __store.bookmark = range.getBookmark(range.commonAncestorContainer);
                    }
                }
                break;
        }
    };

    Editor.prototype.insertMentionTarget = function insertMentionTarget(mentionData) {
        // console.log(mentionData);
        var editor = this.refs.editor;
        var sel = rangy.getSelection();
        var formatter = this.props.formatter;
        if (__store.bookmark) {
            var range = sel.getRangeAt(0);
            range.moveToBookmark(__store.bookmark);
            var mentionNode = document.createElement('input');
            mentionNode.setAttribute('type', 'button');
            mentionNode.setAttribute('tabindex', '-1');
            mentionNode.className = this.props.prefixCls + '-node';
            mentionNode.value = formatter(mentionData);
            // delete origin content in range
            range.deleteContents();
            range.insertNode(mentionNode);
            range.collapseAfter(mentionNode);
            range.select();
            setTimeout(function () {
                editor.focus();
            }, 0);
        }
    };

    Editor.prototype.render = function render() {
        var style = {
            width: this.props.width,
            height: this.props.height
        };
        var className = (0, _classnames2["default"])(this.props.prefixCls, this.props.prefixCls + '-editor');
        return _react2["default"].createElement(
            'div',
            { className: className, ref: 'editor',
                onKeyUp: this.onKeyup.bind(this),
                onKeyDown: this.onKeydown.bind(this),
                contentEditable: contentEditableValue,
                onInput: this.emitChange.bind(this),
                onBlur: this.emitChange.bind(this),
                style: style },
            this.props.children
        );
    };

    Editor.prototype.emitChange = function emitChange(e) {
        var editor = this.refs.editor;
        var nodes = editor.childNodes;
        var content = '';
        for (var i = 0, len = nodes.length; i < len; i += 1) {
            if (nodes[i].nodeType === 1) {
                var tagName = nodes[i].tagName.toLowerCase();
                if (tagName === 'input') {
                    content += ' ' + nodes[i].value + ' ';
                } else if (tagName === 'br') {
                    content += '\n';
                }
            } else if (nodes[i].nodeType === 3) {
                content += nodes[i].textContent || nodes[i].nodeValue;
            }
        }
        this.props.onChange(e, content);
    };

    return Editor;
}(_react2["default"].Component);

exports["default"] = Editor;

Editor.displayName = 'uxcore-mention-editor';
Editor.propType = {
    prefixCls: _react2["default"].PropTypes.string,
    width: _react2["default"].PropTypes.number,
    height: _react2["default"].PropTypes.number,
    mentionTarget: _react2["default"].PropTypes.object,
    matcher: _react2["default"].PropTypes.func,
    setCursorPos: _react2["default"].PropTypes.func,
    panelVisible: _react2["default"].PropTypes.bool,
    formatter: _react2["default"].PropTypes.func,
    onChange: _react2["default"].PropTypes.func
};
Editor.defaultProps = {
    prefixCls: '',
    width: 200,
    height: 100,
    mentionTarget: null,
    matcher: function matcher() {},
    setCursorPos: function setCursorPos() {},
    panelVisible: false,
    formatter: function formatter() {},
    onChange: function onChange() {}
};
module.exports = exports['default'];