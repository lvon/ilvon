'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Alert Component for uxcore
 * @author eternaslky
 *
 * Copyright 2014-2015, Uxcore Team, Alinw.
 * All rights reserved.
 */

var React = require('react');
var ReactDOM = require('react-dom');
var classnames = require('classnames');

var Alert = function (_React$Component) {
    _inherits(Alert, _React$Component);

    function Alert(props) {
        _classCallCheck(this, Alert);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            closed: false
        };
        return _this;
    }

    Alert.prototype.toggleShow = function toggleShow() {
        this.setState({
            closed: !this.state.closed
        });
    };

    Alert.prototype.handleClose = function handleClose(e) {

        this.setState({
            closed: true
        });
        this.props.onClose.call(this, e);
    };

    Alert.prototype.renderContent = function renderContent() {
        var _classnames;

        var me = this;
        var iconMap = {
            message: 'information',
            error: 'error',
            warning: 'caution',
            success: 'success',
            question: 'query',
            stop: 'prohibition',
            wait: 'wait'
        };
        var _me$props = me.props;
        var prefixCls = _me$props.prefixCls;
        var iconPrefixCls = _me$props.iconPrefixCls;
        var type = _me$props.type;
        var closable = _me$props.closable;
        var description = _me$props.description;
        var hasContainer = _me$props.hasContainer;
        var className = _me$props.className;

        var iconType = type;
        if (iconPrefixCls == 'kuma-icon') {
            iconType = iconMap[iconType];
        }
        // 保证 className 加在最外层容器上
        return React.createElement(
            'p',
            { className: classnames((_classnames = {}, _classnames[prefixCls + ' ' + prefixCls + '-' + type] = true, _classnames[className] = !!className && !closable && !description && !hasContainer, _classnames)) },
            React.createElement('i', { className: prefixCls + '-icon ' + iconPrefixCls + ' ' + iconPrefixCls + '-' + iconType }),
            React.createElement(
                'span',
                null,
                me.props.message
            )
        );
    };

    Alert.prototype.renderDes = function renderDes() {
        var me = this;
        var _me$props2 = me.props;
        var description = _me$props2.description;
        var prefixCls = _me$props2.prefixCls;

        if (!!description) {
            return React.createElement(
                'p',
                { className: prefixCls + ' ' + prefixCls + '-follow' },
                description
            );
        }
    };

    Alert.prototype.renderClose = function renderClose() {
        var me = this;
        var _me$props3 = me.props;
        var prefixCls = _me$props3.prefixCls;
        var iconPrefixCls = _me$props3.iconPrefixCls;

        if (me.props.closable) {
            if (me.props.closeText) {
                return React.createElement(
                    'span',
                    { className: prefixCls + '-close', onClick: me.handleClose.bind(me) },
                    me.props.closeText
                );
            } else {
                return React.createElement('i', { className: prefixCls + '-close ' + iconPrefixCls + ' ' + iconPrefixCls + '-close', onClick: me.handleClose.bind(me) });
            }
        }
    };

    Alert.prototype.render = function render() {
        var me = this;
        var _me$props4 = me.props;
        var prefixCls = _me$props4.prefixCls;
        var type = _me$props4.type;
        var closable = _me$props4.closable;
        var hasContainer = _me$props4.hasContainer;
        var description = _me$props4.description;
        var className = _me$props4.className;

        var html = undefined;
        var content = me.renderContent();
        if (hasContainer || closable || !!description) {
            var _classnames2;

            html = React.createElement(
                'div',
                { className: classnames((_classnames2 = {}, _classnames2[prefixCls + '-container ' + prefixCls + '-container-' + type] = true, _classnames2[prefixCls + '-container-closable'] = closable, _classnames2[className] = !!className, _classnames2)) },
                content,
                me.renderDes(),
                me.renderClose()
            );
        } else {
            html = content;
        }
        return this.state.closed ? null : html;
    };

    return Alert;
}(React.Component);

Alert.defaultProps = {
    prefixCls: 'kuma-alert',
    iconPrefixCls: 'kuma-icon',
    type: 'message',
    onClose: function onClose() {},
    hasContainer: false
};

// http://facebook.github.io/react/docs/reusable-components.html
Alert.propTypes = {
    prefixCls: React.PropTypes.string,
    iconPrefixCls: React.PropTypes.string,
    type: React.PropTypes.oneOf(['message', 'error', 'warning', 'success', 'question', 'stop', 'wait']),
    closable: React.PropTypes.bool,
    hasContainer: React.PropTypes.bool,
    closeText: React.PropTypes.oneOfType([React.PropTypes.element, React.PropTypes.string]),
    message: React.PropTypes.oneOfType([React.PropTypes.element, React.PropTypes.string]),
    description: React.PropTypes.oneOfType([React.PropTypes.element, React.PropTypes.string]),
    onClose: React.PropTypes.func

};

Alert.displayName = "Alert";

module.exports = Alert;