'use strict';

exports.__esModule = true;

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _rcTree = require('rc-tree');

var _rcTree2 = _interopRequireDefault(_rcTree);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tree = function (_RcTree) {
    _inherits(Tree, _RcTree);

    function Tree(props) {
        _classCallCheck(this, Tree);

        return _possibleConstructorReturn(this, _RcTree.call(this, props));
    }

    return Tree;
}(_rcTree2["default"]);

Tree.displayName = 'Tree';
Tree.propTypes = _rcTree2["default"].propTypes;
Tree.defaultProps = (0, _objectAssign2["default"])(_rcTree2["default"].defaultProps, {
    prefixCls: 'kuma-tree',
    showIcon: false
});

Tree.TreeNode = _rcTree2["default"].TreeNode;

exports["default"] = Tree;
module.exports = exports['default'];