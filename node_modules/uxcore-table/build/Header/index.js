'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Created by xy on 15/4/13.
 */
var CheckBox = require('../Cell/CheckBox');
var assign = require('object-assign');
var Const = require('uxcore-const');
var Tree = require('uxcore-tree');
var classnames = require('classnames');
var TreeNode = Tree.TreeNode;


var React = require('react');
var ReactDOM = require('react-dom');

var Header = function (_React$Component) {
    _inherits(Header, _React$Component);

    function Header(props) {
        _classCallCheck(this, Header);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            pickerDisplay: 'none'
        };
        return _this;
    }

    Header.prototype.componentDidMount = function componentDidMount() {
        var me = this;
        me.handleGlobalClick = this.handleGlobalClick.bind(this);
        $(document).on('click.uxcore-grid-header', me.handleGlobalClick);
    };

    Header.prototype.componentWillUnmount = function componentWillUnmount() {
        var me = this;
        $(document).off('click.uxcore-grid-header', me.handleGlobalClick);
    };

    Header.prototype.handleGlobalClick = function handleGlobalClick(e) {
        if (this.props.columnPicker) {
            this.hideColumnPicker(e);
        }
    };

    Header.prototype.hideColumnPicker = function hideColumnPicker(e) {
        var target = e.target;

        if ($(target).parents('.kuma-column-picker-container').length == 0 && !$(target).hasClass("kuma-column-picker-container")) {
            this.setState({
                pickerDisplay: 'none'
            });
        }
    };

    Header.prototype.handleCheckBoxChange = function handleCheckBoxChange() {
        var v = this.refs.checkbox.getValue();
        this.props.checkAll.apply(null, [v]);
    };

    Header.prototype.handleColumnPicker = function handleColumnPicker(e) {

        e.stopPropagation();
        if (this.state.pickerDisplay == 'block') {
            this.setState({
                pickerDisplay: 'none'
            });
        } else {
            this.setState({
                pickerDisplay: 'block'
            });
        }
    };

    Header.prototype.handlePickerCheck = function handlePickerCheck(info) {
        this.props.handleColumnPickerChange(info.checkedKeys);
    };

    Header.prototype.getCheckedKeys = function getCheckedKeys() {
        var me = this;
        var columns = me.props.columns;

        var _columns = [];
        var checkedKeys = [];
        columns.forEach(function (item, index) {
            if ('group' in item) {
                _columns = _columns.concat(item.columns);
            } else {
                _columns.push(item);
            }
        });
        _columns.forEach(function (item, index) {
            if (!item.hidden) {
                checkedKeys.push(item.dataKey);
            }
        });
        return checkedKeys;
    };

    Header.prototype.renderColumnTree = function renderColumnTree() {
        var me = this;
        var columns = me.props.columns;

        var notRenderColumns = ['jsxchecked', 'jsxtreeIcon', 'jsxwhite'];

        var treeProps = {
            multiple: true,
            checkable: true,
            defaultCheckedKeys: me.getCheckedKeys(),
            onCheck: me.handlePickerCheck.bind(me)
        };

        return React.createElement(
            Tree,
            treeProps,
            columns.map(function (item, index) {
                if (notRenderColumns.indexOf(item.dataKey) !== -1) return;
                if ('group' in item) {
                    return React.createElement(
                        TreeNode,
                        { key: item.group, title: item.group },
                        item.columns.map(function (column, idx) {
                            return React.createElement(TreeNode, { key: column.dataKey, title: column.title });
                        })
                    );
                } else {
                    return React.createElement(TreeNode, { key: item.dataKey, title: item.title });
                }
            }).filter(function (item, index) {
                return item != undefined;
            })
        );
    };

    Header.prototype.renderPicker = function renderPicker() {
        var me = this;
        var _style = {
            display: this.state.pickerDisplay
        };

        return React.createElement(
            'div',
            { className: classnames({
                    "kuma-column-picker-container": true,
                    "hasGroup": me.hasGroup
                }) },
            React.createElement('i', { className: 'kuma-icon kuma-icon-target-list kuma-column-picker', onClick: this.handleColumnPicker.bind(this) }),
            React.createElement(
                'div',
                { className: 'kuma-uxtable-colmnpicker', style: _style, ref: 'columnpicker' },
                me.renderColumnTree()
            )
        );
    };

    Header.prototype.handleColumnOrder = function handleColumnOrder(type, column) {
        column.orderType = type;
        this.props.orderColumnCB.apply(null, [type, column]);
    };

    Header.prototype.renderOrderIcon = function renderOrderIcon(column) {
        var me = this;
        if (column.ordered) {
            var desc = "sort-down",
                asc = "sort-up";
            if (me.props.activeColumn && column.dataKey == me.props.activeColumn.dataKey) {
                if (column.orderType == "desc") {
                    desc = "sort-down-active";
                } else {
                    asc = "sort-up-active";
                }
            }
            return React.createElement(
                'span',
                { className: 'kuma-uxtable-h-sort' },
                React.createElement('i', { className: asc, onClick: me.handleColumnOrder.bind(me, 'asc', column) }),
                React.createElement('i', { className: desc, onClick: me.handleColumnOrder.bind(me, 'desc', column) })
            );
        }
    };

    Header.prototype.renderColumn = function renderColumn(item, index, hasGroup, last) {

        if (item.hidden) return;
        var me = this;
        var noBorderColumn = ['jsxchecked', 'jsxtreeIcon', 'jsxwhite'];
        var _style = {
            width: item.width ? item.width : 100,
            textAlign: item.align ? item.align : "left"
        };
        var _v = undefined;

        if (hasGroup) {
            assign(_style, {
                height: 80,
                lineHeight: 80 + 'px'
            });
        }

        if (item.type == 'checkbox' || item.type == 'checkboxSelector') {
            assign(_style, {
                paddingRight: 18,
                paddingLeft: 12,
                width: item.width ? item.width : 92,
                borderRight: 'none'
            });

            var checkBoxProps = {
                ref: 'checkbox',
                disable: me.props.mode !== Const.MODE.VIEW ? item.disable : true,
                onchange: me.handleCheckBoxChange.bind(me)
            };

            _v = React.createElement(CheckBox, checkBoxProps);
        } else {
            _v = React.createElement(
                'span',
                { title: item.title },
                item.title
            );
        }

        if (noBorderColumn.indexOf(item.dataKey) !== -1 || last) {
            assign(_style, {
                borderRight: 'none'
            });
        }

        return React.createElement(
            'div',
            { key: index, className: classnames({
                    "kuma-uxtable-cell": true,
                    "show-border": me.props.showHeaderBorder
                }), style: _style },
            _v,
            me.renderOrderIcon(item)
        );
    };

    Header.prototype.renderItems = function renderItems(_columns) {
        var me = this;

        var columns = _columns.map(function (item, index) {
            var last = index == _columns.length - 1;
            if ('group' in item) {
                // First determine whether the group should be rendered, if all columns
                // is hidden, the column group should not be rendered.
                var shouldRenderGroup = item.columns.some(function (column, i) {
                    return !column.hidden;
                });
                if (shouldRenderGroup) {
                    return React.createElement(
                        'div',
                        { className: 'kuma-uxtable-header-column-group', key: index },
                        React.createElement(
                            'div',
                            { className: 'kuma-uxtable-header-group-name' },
                            item.group
                        ),
                        item.columns.map(function (column, i) {
                            return me.renderColumn(column, i, false, last);
                        })
                    );
                }
            } else {
                return me.renderColumn(item, index, me.hasGroup, last);
            }
        });
        return columns;
    };

    Header.prototype.render = function render() {

        var props = this.props,
            me = this,
            _picker = undefined,
            _width = 0,
            headerWrapClassName = undefined,
            _headerStyle = {},
            _columns = undefined;

        if (props.columnPicker && (props.fixedColumn == 'no' || props.fixedColumn == 'scroll')) {
            _picker = this.renderPicker();
        }

        if (props.fixedColumn == 'fixed') {
            _columns = props.columns.filter(function (item) {
                if (item.fixed && !item.hidden) {
                    if (!item.width) {
                        item.width = 100;
                    }
                    _width = item.width * 1 + _width;
                    return true;
                }
            });
            assign(_headerStyle, {
                width: _width,
                minWidth: _width
            });
            headerWrapClassName = "kuma-uxtable-header-fixed";
        } else if (props.fixedColumn == 'scroll') {
            _columns = props.columns.filter(function (item) {
                if (!item.fixed) {
                    return true;
                } else if (!item.hidden) {
                    if (!item.width) {
                        item.width = 100;
                    }
                    _width = item.width * 1 + _width;
                }
            });
            assign(_headerStyle, {
                width: props.width - _width - 3,
                minWidth: props.width - _width - 3
            });
            headerWrapClassName = "kuma-uxtable-header-scroll";
        } else {
            _columns = props.columns;
            headerWrapClassName = "kuma-uxtable-header-no";
        }

        me.hasGroup = false;
        for (var i = 0; i < _columns.length; i++) {
            if ('group' in _columns[i]) {
                me.hasGroup = true;
                break;
            }
        }

        assign(_headerStyle, {
            height: props.headerHeight ? props.headerHeight : me.hasGroup ? 80 : 40,
            lineHeight: (props.headerHeight ? props.headerHeight : 40) + "px"
        });

        return React.createElement(
            'div',
            { className: headerWrapClassName, style: _headerStyle },
            React.createElement(
                'div',
                { className: props.jsxprefixCls },
                me.renderItems(_columns),
                _picker
            )
        );
    };

    return Header;
}(React.Component);

;

Header.propTypes = {};

Header.defaultProps = {
    jsxprefixCls: "kuma-uxtable-header"
};

module.exports = Header;