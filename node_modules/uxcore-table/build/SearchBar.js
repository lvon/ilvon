'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Grid Component for uxcore
 * @author zhouquan.yezq
 *
 * Copyright 2014-2015, UXCore Team, Alinw.
 * All rights reserved.
 */

var React = require('react');
var ReactDOM = require('react-dom');

var SearchBar = function (_React$Component) {
    _inherits(SearchBar, _React$Component);

    function SearchBar(props) {
        _classCallCheck(this, SearchBar);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            searchTxt: ""
        };
        return _this;
    }

    SearchBar.prototype.doSearch = function doSearch() {
        this.props.onSearch(this.state.searchTxt);
    };

    SearchBar.prototype.onKeyDown = function onKeyDown(e) {
        if (e.keyCode == 13) {
            this.doSearch();
        }
    };

    SearchBar.prototype.handleChange = function handleChange(e) {
        this.setState({
            searchTxt: e.target.value
        });
    };

    SearchBar.prototype.render = function render() {
        var me = this;
        var placeholder = me.props.placeholder;

        return React.createElement(
            'div',
            { className: this.props.jsxprefixCls },
            React.createElement('input', { type: 'text', className: 'kuma-input', placeholder: placeholder, value: this.state.value, onKeyDown: this.onKeyDown.bind(this), onChange: this.handleChange.bind(this) }),
            React.createElement('i', { className: 'kuma-icon kuma-icon-search', onClick: this.doSearch.bind(this) })
        );
    };

    return SearchBar;
}(React.Component);

;

SearchBar.propTypes = {};

SearchBar.defaultProps = {
    jsxprefixCls: "kuma-uxtable-searchbar",
    onSearch: function onSearch() {}
};

module.exports = SearchBar;