"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Grid Component for uxcore
 * @author zhouquan.yezq
 *
 * Copyright 2014-2015, UXCore Team, Alinw.
 * All rights reserved.
 */

var SearchBar = require("./SearchBar");
var classnames = require("classnames");
var Button = require("uxcore-button");
var React = require('react');
var ReactDOM = require('react-dom');

var ActionBar = function (_React$Component) {
    _inherits(ActionBar, _React$Component);

    function ActionBar(props) {
        _classCallCheck(this, ActionBar);

        return _possibleConstructorReturn(this, _React$Component.call(this, props));
    }

    ActionBar.prototype.handleSearch = function handleSearch(value) {
        this.props.onSearch(value);
    };

    ActionBar.prototype.renderActionBtn = function renderActionBtn(item, index) {
        var me = this;
        var itemProps = {
            className: me.props.jsxprefixCls + "-item",
            onClick: item.callback || function () {},
            key: index
        };
        if (!!item.render && typeof item.render == "function") {
            return React.createElement(
                "div",
                itemProps,
                item.render(item.title)
            );
        } else {
            return React.createElement(
                Button,
                _extends({ type: "secondary", size: "medium" }, itemProps),
                item.title
            );
        }
    };

    ActionBar.prototype.renderSearchBar = function renderSearchBar() {
        if (this.props.showSearch) {
            var me = this;
            var searchBarProps = {
                onSearch: me.handleSearch.bind(me),
                key: 'searchbar',
                placeholder: me.props.searchBarPlaceholder
            };
            return React.createElement(SearchBar, searchBarProps);
        }
    };

    /**
     *  convert ActionBar config from hash to array
     */


    ActionBar.prototype.getActionItem = function getActionItem(config) {
        var items = [];
        if (config instanceof Array) {
            items = config;
        } else if ((typeof config === "undefined" ? "undefined" : _typeof(config)) == "object") {
            for (var item in config) {
                if (config.hasOwnProperty(item)) {
                    items.push({
                        title: item,
                        callback: config[item]
                    });
                }
            }
        }
        return items;
    };

    ActionBar.prototype.render = function render() {
        var _classnames;

        var me = this,
            _props = this.props,
            _barConfig = _props.actionBarConfig;

        return React.createElement(
            "div",
            { className: classnames((_classnames = {}, _classnames[_props.jsxprefixCls] = _props.jsxprefixCls, _classnames["fn-clear"] = true, _classnames)) },
            me.getActionItem(_barConfig).map(function (item, index) {
                return me.renderActionBtn(item, index);
            }),
            me.renderSearchBar()
        );
    };

    return ActionBar;
}(React.Component);

;

ActionBar.propTypes = {};

ActionBar.defaultProps = {
    jsxprefixCls: "kuma-uxtable-actionbar"
};

module.exports = ActionBar;