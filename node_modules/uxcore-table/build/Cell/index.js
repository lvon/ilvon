'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Created by xy on 15/4/13.
 */

var React = require('react');
var ReactDOM = require('react-dom');
var Const = require('uxcore-const');
var CheckBox = require('./CheckBox');
var Radio = require('./Radio');
var TextField = require('./TextField');
var SelectField = require("./SelectField");
var RadioField = require("./RadioField");
var util = require('./Util');
var classnames = require('classnames');
var assign = require('object-assign');
var deepcopy = require('deepcopy');
var fieldsMap = {
    "select": SelectField,
    "text": TextField,
    "radio": RadioField
};

var Cell = function (_React$Component) {
    _inherits(Cell, _React$Component);

    function Cell(props) {
        _classCallCheck(this, Cell);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            'fold': 1, // 1- fold  0-unfold
            'checked': !!_this.getCellData()
        };
        return _this;
    }

    Cell.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var me = this;
        if (me.props.column.type == "checkbox" || me.props.column.type == "checkboxSelector" || me.props.column.type == "radioSelector") {
            me.setState({
                checked: !!me.getCellData(nextProps)
            });
        }
    };

    Cell.prototype.componentDidMount = function componentDidMount() {
        var me = this;
        if (me.props.column.type == "checkbox" || me.props.column.type == "checkboxSelector" || me.props.column.type == "radioSelector") {
            me.props.changeSelected(me.state.checked, me.props.rowIndex, true);
        }
    };

    Cell.prototype.handleCheckChange = function handleCheckChange(e) {
        var me = this,
            _props = this.props,
            v = _props.rowData;
        me.props.changeSelected(e.target.checked, _props.rowIndex, false);
    };

    Cell.prototype.showSubComp = function showSubComp() {
        this.props.showSubCompCallback.apply();
    };

    Cell.prototype.renderTreeIcon = function renderTreeIcon() {
        if (this.props.cellIndex == 0 && this.props.hasSubComp) {
            var open = this.props.rowData.showSubComp;
            return React.createElement(
                'span',
                { className: 'kuma-uxtable-tree-icon', onClick: this.showSubComp.bind(this) },
                React.createElement('i', { className: classnames({
                        "kuma-icon": true,
                        "kuma-icon-tree-open-2": open,
                        "kuma-icon-tree-close-2": !open
                    }) })
            );
        }
    };

    /**
     * @param actions {Array or Object}
     */


    Cell.prototype.getActionItems = function getActionItems(actions) {
        if ((typeof actions === 'undefined' ? 'undefined' : _typeof(actions)) !== "object") {
            console.error("Table: Actions should be an object or array");
            return [];
        } else {
            var me = this;
            me.items = [];
            if (actions instanceof Array) {
                me.items = actions;
            } else {
                for (var i in actions) {
                    if (actions.hasOwnProperty(i)) {
                        me.items.push({
                            title: i,
                            callback: actions[i]
                        });
                    }
                }
            }

            return me.items;
        }
    };

    Cell.prototype.getEditData = function getEditData() {
        var me = this;
        var column = me.props.column;
        var editKey = column.editKey || column.dataKey;
        return me.props.rowData[editKey];
    };

    Cell.prototype.getCellData = function getCellData(nextProps) {

        var props = nextProps || this.props,
            _column = props.column,
            cellData = props.rowData[_column.dataKey];

        return cellData;
    };

    Cell.prototype.render = function render() {

        var me = this,
            props = me.props,
            _column = props.column,
            _width = _column.width,
            _mode = props.rowData['__mode__'],
            _style = {
            width: _width ? _width : 100,
            textAlign: props.align ? props.align : "left"
        },
            _v = deepcopy(props.rowData),
            renderProps = undefined;

        if (_column.type == 'action') {
            (function () {
                var showActionIndex = 0;
                _v = React.createElement(
                    'div',
                    { className: 'action-container' },
                    me.getActionItems(_column.actions).map(function (item, index) {

                        // There are two cases in which Table will render the action.
                        // One is that 'mode' is not defined in action, which means it will be rendered in any mode.
                        // The other is that 'mode' is defined & 'mode' is equal to the Cell mode,
                        // which means this action is rendered in the user-specified mode.

                        if (!('mode' in item) || item.mode == _mode) {
                            var arr = [];
                            if (showActionIndex !== 0) {
                                arr.push(React.createElement(
                                    'span',
                                    { key: 'split', className: 'split' },
                                    ' | '
                                ));
                            }
                            showActionIndex++;
                            arr.push(React.createElement(
                                'a',
                                { href: 'javascript:void(0);', className: 'action', key: 'action', onClick: item.callback.bind(me, _v, me.props.root) },
                                !!item.render ? item.render(item.title, me.props.rowData) : item.title
                            ));
                            return React.createElement(
                                'span',
                                { key: index },
                                arr
                            );
                        }
                    })
                );
            })();
        } else if (_column.type == 'checkbox' || _column.type == 'checkboxSelector') {

            _style.paddingRight = 18;
            _style.paddingLeft = 12;

            var checked = undefined;
            if (me.state.checked) {
                checked = 'checked';
            } else {
                checked = "";
            }

            var disable = false;
            if ('disable' in _column) {
                disable = _column.disable;
            } else if ('isDisable' in _column) {
                disable = !!_column.isDisable(props.rowData);
            }
            _v = React.createElement(CheckBox, { disable: disable, mode: props.mode, align: props.align, jsxchecked: checked, ref: 'checkbox', onchange: me.handleCheckChange.bind(me) });
        } else if (_column.type == 'radioSelector') {
            _style.paddingRight = 18;
            _style.paddingLeft = 12;

            var checked = undefined;
            if (me.state.checked) {
                checked = 'checked';
            } else {
                checked = "";
            }

            var disable = false;
            if ('disable' in _column) {
                disable = _column.disable;
            } else if ('isDisable' in _column) {
                disable = !!_column.isDisable(props.rowData);
            }
            _v = React.createElement(Radio, { disable: disable, mode: props.mode, align: props.align, jsxchecked: checked, onchange: me.handleCheckChange.bind(me) });
        } else if (_column.type == 'treeIcon') {
            _v = me.renderTreeIcon();
        }

        // inline edit mode

        else if ((_column.type == 'custom' || _column.type in fieldsMap) && _mode == Const.MODE.EDIT && (!('canEdit' in _column) || _column.canEdit(props.rowData))) {
                renderProps = {
                    value: me.getEditData(),
                    rowData: props.rowData,
                    index: props.index,
                    column: _column,
                    handleDataChange: props.handleDataChange,
                    attachCellField: props.attachCellField,
                    detachCellField: props.detachCellField
                };
                var Field = undefined;

                if (_column.type == 'custom') {
                    Field = props.column.customField;
                } else {
                    Field = fieldsMap[_column.type];
                }
                _v = React.createElement(Field, renderProps);
            } else if (_column.type == 'money' || _column.type == "card" || _column.type == "cnmobile") {
                _v = React.createElement(
                    'div',
                    { title: me.getCellData() },
                    util.formatValue(me.getCellData(), _column.type, _column.delimiter)
                );
            } else if (_column.render) {
                _v = _column.render.apply(null, [me.getCellData(), _v]);
            } else {
                _v = React.createElement(
                    'div',
                    { title: me.getCellData() },
                    me.getCellData()
                );
            }

        var child = me.props.children;
        return React.createElement(
            'div',
            { className: props.jsxprefixCls, style: _style },
            child,
            _v
        );
    };

    return Cell;
}(React.Component);

;

Cell.propTypes = {};

Cell.defaultProps = {
    jsxprefixCls: "kuma-uxtable-cell"
};

exports["default"] = Cell;
module.exports = exports['default'];