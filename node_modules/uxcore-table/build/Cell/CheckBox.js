'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A checkbox field
 */

var Const = require('uxcore-const');
var React = require('react');
var ReactDOM = require('react-dom');

var CheckBox = function (_React$Component) {
    _inherits(CheckBox, _React$Component);

    function CheckBox(props) {
        _classCallCheck(this, CheckBox);

        return _possibleConstructorReturn(this, _React$Component.call(this, props));
    }

    CheckBox.prototype.handleChange = function handleChange(e) {
        var v = this.getValue();
        v = v ? 'checked' : '';
        this.props.onchange.apply(null, [e]);
    };

    CheckBox.prototype.getValue = function getValue() {
        return this.refs.checkbox.checked;
    };

    CheckBox.prototype.render = function render() {

        var props = this.props;

        if (props.mode !== Const.MODE.VIEW) {
            var renderProps = {
                className: "kuma-checkbox",
                checked: this.props.jsxchecked,
                onChange: this.handleChange.bind(this)
            };
            if (!!props.disable) {
                renderProps.disabled = true;
            }
            return React.createElement(
                'label',
                null,
                React.createElement('input', _extends({ type: 'checkbox', ref: 'checkbox' }, renderProps)),
                React.createElement('s', null)
            );
        } else {

            var renderProps = {
                className: "kuma-checkbox",
                checked: this.props.jsxchecked,
                disabled: true
            };
            return React.createElement(
                'label',
                null,
                React.createElement('input', _extends({ type: 'checkbox', ref: 'checkbox' }, renderProps)),
                React.createElement('s', null)
            );
        }
    };

    return CheckBox;
}(React.Component);

;

CheckBox.propTypes = {};

CheckBox.defaultProps = {};

exports["default"] = CheckBox;
module.exports = exports['default'];