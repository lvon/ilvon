'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A editable plain text field
 */

var CellField = require('./CellField');
var classnames = require('classnames');
var assign = require('object-assign');
var React = require('react');
var ReactDOM = require('react-dom');

var TextField = function (_CellField) {
    _inherits(TextField, _CellField);

    function TextField(props) {
        _classCallCheck(this, TextField);

        return _possibleConstructorReturn(this, _CellField.call(this, props));
    }

    TextField.prototype.renderContent = function renderContent() {
        var me = this;
        var dataKey = me.props.column.dataKey;
        var fieldProps = {
            className: classnames({
                "kuma-input": true
            }),
            onChange: function onChange(e) {
                me.handleDataChange({
                    jsxid: me.props.rowData['jsxid'],
                    column: me.props.column,
                    value: e.target.value,
                    text: e.target.value
                });
            },
            value: me.props.value
        };
        if (me.props.column.config) {
            var _me$props$column$conf = me.props.column.config;
            var className = _me$props$column$conf.className;
            var onChange = _me$props$column$conf.onChange;

            var customProps = _objectWithoutProperties(_me$props$column$conf, ['className', 'onChange']);

            assign(fieldProps, customProps);
        }
        return React.createElement('input', fieldProps);
    };

    return TextField;
}(CellField);

;

TextField.propTypes = assign({}, CellField.propTypes);

TextField.defaultProps = assign({}, CellField.defaultProps);

module.exports = TextField;