"use strict";

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Created by xy on 15/4/13.
 */

var Row = require("./Row");
var Mask = require("./Mask");
var util = require("./util");
var deepcopy = require('deepcopy');

var React = require('react');
var ReactDOM = require('react-dom');

var Tbody = function (_React$Component) {
    _inherits(Tbody, _React$Component);

    function Tbody(props) {
        _classCallCheck(this, Tbody);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {};
        return _this;
    }

    Tbody.prototype.componentDidMount = function componentDidMount() {
        var me = this;
        me.rootEl = ReactDOM.findDOMNode(me.refs.root);
        me.scrollHandler = me.onScroll.bind(me);
        $(me.rootEl).on("scroll", me.scrollHandler);
    };

    Tbody.prototype.componentWillUnmount = function componentWillUnmount() {
        var me = this;
        me.resizeTimer = null;
        $(me.rootEl).off("scroll", me.scrollHandler);
    };

    Tbody.prototype.renderEmptyData = function renderEmptyData() {

        if (this.props.data.length == 0 && !this.props.mask) {
            var _style = {
                lineHeight: this.props.height - 10 + "px"
            };
            return React.createElement(
                "div",
                { className: "kuma-uxtable-body-emptyword", style: _style },
                this.props.root.props.emptyText
            );
        }
    };

    Tbody.prototype.onScroll = function onScroll(e) {
        // TODO: remove jquery animation
        //       merge classname scroll/no/fixed

        this.el = ReactDOM.findDOMNode(this);
        var $tableEl = $(this.el).parents(".kuma-uxtable");
        if (this.props.fixedColumn == 'no') {
            $tableEl.find('.kuma-uxtable-header-no').animate({ scrollLeft: $tableEl.find('.kuma-uxtable-body-no').scrollLeft() }, 0);
            return;
        }

        var target = $(e.target);
        if (target.hasClass('kuma-uxtable-body-scroll')) {

            $tableEl.find('.kuma-uxtable-body-fixed').animate({ scrollTop: $tableEl.find('.kuma-uxtable-body-scroll').scrollTop() }, 0);
            $tableEl.find('.kuma-uxtable-header-scroll').animate({ scrollLeft: $tableEl.find('.kuma-uxtable-body-scroll').scrollLeft() }, 0);
        } else {
            $tableEl.find('.kuma-uxtable-body-scroll').animate({ scrollTop: $tableEl.find('.kuma-uxtable-body-fixed').scrollTop() }, 0);
        }
    };

    Tbody.prototype.render = function render() {

        var me = this,
            _props = me.props,
            _columns = _props.columns,
            _data = _props.data.length > 0 ? _props.data : [],
            _style = {},
            _width = 0,
            bodyWrapClassName = undefined;

        if (_props.fixedColumn == 'fixed') {
            _columns = _props.columns.filter(function (item) {
                if (item.fixed && !item.hidden) {
                    if (!item.width) {
                        item.width = 100;
                    }
                    _width = item.width * 1 + _width;
                    return true;
                }
            });
            _style = {
                width: _width,
                minWidth: _width
            };
            bodyWrapClassName = "kuma-uxtable-body-fixed";
        } else if (_props.fixedColumn == 'scroll') {
            var fixedWidth = 0;
            _columns = _props.columns.filter(function (item) {
                if (!item.fixed) {
                    return true;
                } else if (!item.hidden) {
                    if (!item.width) {
                        item.width = 100;
                    }
                    _width = item.width * 1 + _width;
                }
            });

            // content-box: border-box
            var delta = 2;
            if (util.isIE(8)) {
                delta = 3;
            }
            _style = {
                width: _props.width - _width - delta, //change 2 to 3, fix ie8 issue
                minWidth: _props.width - _width - delta
            };
            bodyWrapClassName = "kuma-uxtable-body-scroll";
        } else {
            bodyWrapClassName = "kuma-uxtable-body-no";
        }
        return React.createElement(
            "div",
            { className: bodyWrapClassName, ref: "root", style: _style },
            React.createElement(
                "ul",
                { className: this.props.jsxprefixCls },
                this.renderEmptyData(),
                _data.map(function (item, index) {
                    var renderProps = {
                        columns: _columns,
                        rowIndex: item.jsxid, //tree mode, rowIndex need think more, so use jsxid
                        rowData: deepcopy(_data[index]),
                        index: index,
                        data: _data,
                        root: _props.root,
                        addRowClassName: _props.addRowClassName,
                        rowSelection: _props.rowSelection,
                        changeSelected: me.props.changeSelected,
                        subComp: _props.subComp,
                        renderSubComp: _props.renderSubComp,
                        actions: _props.actions,
                        key: 'row' + index,
                        mode: _props.mode,
                        renderModel: _props.renderModel,
                        fixedColumn: _props.fixedColumn,
                        level: 1,
                        levels: _props.levels,
                        handleDataChange: _props.handleDataChange,
                        attachCellField: _props.attachCellField,
                        detachCellField: _props.detachCellField,
                        visible: true
                    };
                    return React.createElement(Row, renderProps);
                }),
                React.createElement(Mask, { visible: _props.mask })
            )
        );
    };

    return Tbody;
}(React.Component);

;

Tbody.propTypes = {};

Tbody.defaultProps = {
    jsxprefixCls: "kuma-uxtable-body"
};

exports["default"] = Tbody;
module.exports = exports['default'];