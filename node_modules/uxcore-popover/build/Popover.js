'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Popover Component for uxcore
 * @author eternalsky
 *
 * Copyright 2014-2015, Uxcore Team, Alinw.
 * All rights reserved.
 */

var React = require('react');
var ReactDOM = require('react-dom');

var Tooltip = require("rc-tooltip");
var Button = require("uxcore-button");

var Popover = function (_React$Component) {
    _inherits(Popover, _React$Component);

    function Popover(props) {
        _classCallCheck(this, Popover);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            visible: false
        };
        return _this;
    }

    Popover.prototype.handleOkClick = function handleOkClick() {
        var me = this;
        me.props.onOk(function () {
            me.setState({
                visible: false
            });
        });
    };

    Popover.prototype.handleCancelClick = function handleCancelClick() {
        var me = this;
        me.setState({
            visible: false
        }, function () {
            me.props.onCancel();
        });
    };

    Popover.prototype.handleVisibleChange = function handleVisibleChange(visible) {
        this.setState({
            visible: visible
        });
    };

    Popover.prototype._renderButton = function _renderButton() {
        var me = this;
        if (me.props.showButton) {
            return React.createElement(
                'div',
                { className: me.props.prefixCls + "-button-group" },
                React.createElement(
                    Button,
                    { size: 'small', type: 'primary', onClick: me.handleOkClick.bind(me) },
                    me.props.okText
                ),
                React.createElement(
                    Button,
                    { size: 'small', type: 'secondary', onClick: me.handleCancelClick.bind(me) },
                    me.props.cancelText
                )
            );
        }
    };

    Popover.prototype._generateOverlay = function _generateOverlay() {
        var me = this;
        var arr = [];
        if (me.props.title) {
            arr.push(React.createElement(
                'div',
                { key: 'title', className: me.props.prefixCls + '-title' },
                me.props.title
            ));
        }
        if (me.props.overlay) {
            arr.push(React.createElement(
                'div',
                { key: 'content', className: me.props.prefixCls + '-content' },
                me.props.overlay,
                me._renderButton()
            ));
        }
        return React.createElement(
            'div',
            null,
            arr
        );
    };

    Popover.prototype.render = function render() {
        var me = this;

        var transitionName = {
            top: 'zoom-down',
            bottom: 'zoom-up',
            left: 'zoom-right',
            right: 'zoom-left',
            topLeft: 'zoom-down',
            bottomLeft: 'zoom-up',
            leftTop: 'zoom-right',
            rightTop: 'zoom-left',
            topRight: 'zoom-down',
            bottomRight: 'zoom-up',
            leftBottom: 'zoom-right',
            rightBottom: 'zoom-left'
        }[me.props.placement];

        return React.createElement(
            Tooltip,
            { placement: me.props.placement,
                overlayClassName: me.props.overlayClassName,
                prefixCls: me.props.prefixCls,
                visible: me.state.visible,
                onVisibleChange: me.handleVisibleChange.bind(me),
                delay: me.props.delay,
                transitionName: transitionName,
                trigger: me.props.trigger,
                overlay: me._generateOverlay() },
            me.props.children
        );
    };

    return Popover;
}(React.Component);

Popover.defaultProps = {
    prefixCls: 'kuma-popover',
    delay: 0,
    placement: "top",
    trigger: "hover",
    onOk: function onOk(cb) {
        cb();
    },
    onCancel: function onCancel() {},
    okText: "确定",
    cancelText: "取消",
    showButton: false
};

// http://facebook.github.io/react/docs/reusable-components.html
Popover.propTypes = {
    prefixCls: React.PropTypes.string,
    delay: React.PropTypes.number,
    overlayClassName: React.PropTypes.string,
    placement: React.PropTypes.oneOf(['top', 'bottom', 'left', 'right', 'topLeft', 'bottomLeft', 'leftTop', 'rightTop', 'topRight', 'bottomRight', 'leftBottom', 'rightBottom']),
    trigger: React.PropTypes.oneOf(['hover', 'click']),
    onOk: React.PropTypes.func,
    onCancel: React.PropTypes.func,
    okText: React.PropTypes.string,
    cancelText: React.PropTypes.string,
    showButton: React.PropTypes.bool
};

Popover.displayName = "Popover";

module.exports = Popover;