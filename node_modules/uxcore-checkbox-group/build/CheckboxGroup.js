"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CheckboxGroup Component for uxcore
 * @author eternalsky
 *
 * Copyright 2014-2015, Uxcore Team, Alinw.
 * All rights reserved.
 */

var Item = require("./CheckboxItem");
var assign = require("object-assign");
var React = require('react');
var ReactDOM = require('react-dom');

var CheckboxGroup = function (_React$Component) {
    _inherits(CheckboxGroup, _React$Component);

    function CheckboxGroup(props) {
        _classCallCheck(this, CheckboxGroup);

        return _possibleConstructorReturn(this, _React$Component.call(this, props));
    }

    CheckboxGroup.prototype.componentWillMount = function componentWillMount() {
        var me = this;
        me.selected = me._copy(me.props.value) || [];
    };

    CheckboxGroup.prototype.componentDidUpdate = function componentDidUpdate() {
        var me = this;
        me.selected = me._copy(me.props.value) || [];
    };

    CheckboxGroup.prototype._copy = function _copy(a) {
        return JSON.parse(JSON.stringify(a));
    };

    CheckboxGroup.prototype._processChild = function _processChild() {
        var me = this;
        var length = React.Children.count(me.props.children);
        if (!length) return false;
        var elements = React.Children.map(me.props.children, function (child, index) {
            if (!!child.type && child.type.displayName == "CheckboxItem") {
                return React.cloneElement(child, {
                    jsxdisabled: me.props.disabled,
                    onChange: me._handleChange.bind(me),
                    key: index,
                    checked: me.props.value.indexOf(child.props.value) != -1
                });
            }
        });
        return elements;
    };

    CheckboxGroup.prototype._handleChange = function _handleChange(checked, value) {
        var me = this;
        if (checked) {
            // me.selected = me.selected.concat([value]);
            me.selected.push(value);
        } else {
            me.selected = me.selected.filter(function (item) {
                return item != value;
            });
        }
        me.props.onChange(JSON.parse(JSON.stringify(me.selected)));
    };

    CheckboxGroup.prototype.render = function render() {
        var me = this;
        return React.createElement(
            "div",
            { className: me.props.className },
            me._processChild()
        );
    };

    return CheckboxGroup;
}(React.Component);

CheckboxGroup.Item = Item;

CheckboxGroup.defaultProps = {
    value: [],
    onChange: function onChange() {},
    disabled: false,
    className: 'kuma-checkbox-group'
};

// http://facebook.github.io/react/docs/reusable-components.html
CheckboxGroup.propTypes = {
    value: React.PropTypes.array,
    onChange: React.PropTypes.func,
    disabled: React.PropTypes.bool,
    className: React.PropTypes.string
};

CheckboxGroup.displayName = "CheckboxGroup";

module.exports = CheckboxGroup;