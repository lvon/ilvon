'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var ReactDOM = require('react-dom');

var _require = require('uploadcore');

var UploadCore = _require.UploadCore;
var Events = _require.Events;
var Status = _require.Status;

var Progress = require('./Progress');
var util = require("./util");
var FileList = require("./FileList");
var Picker = require("./Picker");
var i18n = require("./locale");

UploadCore.setSWF('https://alinw.alicdn.com/alinw/uxuploader/2.0.1/flashpicker.swf');

var CORE_INSTANCE = {};
function getCoreInstance(props, autoPending) {
    var core = props.core;
    if (core instanceof UploadCore) {
        return core;
    }

    var id = core;
    if (id && typeof id === 'string' && CORE_INSTANCE.hasOwnProperty(id)) {
        return CORE_INSTANCE[id];
    }

    var options = props.options || {};
    ['name', 'url', 'params', 'action', 'data', 'headers', 'withCredentials', 'timeout', 'chunkEnable', 'chunkSize', 'chunkRetries', 'chunkProcessThreads', 'processThreads', 'queueCapcity', 'autoPending', 'multiple', 'accept', 'sizeLimit', 'preventDuplicate'].forEach(function (key) {
        if (props.hasOwnProperty(key)) {
            options[key] = props[key];
        }
    });
    if (autoPending != null) {
        options.autoPending = autoPending;
    }

    core = new UploadCore(options);

    for (var key in props) {
        if (props.hasOwnProperty(key)) {
            var m = /^on(\w+)$/i.exec(key);
            if (!m) continue;
            if (typeof props[key] === 'function') {
                core.on(m[1], props[key]);
            }
        }
    }

    if (id) {
        CORE_INSTANCE[id] = core;
    }

    return core;
}

var Uploader = function (_React$Component) {
    _inherits(Uploader, _React$Component);

    function Uploader(props) {
        _classCallCheck(this, Uploader);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.core = getCoreInstance(_this.props, true);

        _this.state = {
            total: _this.core.getTotal()
        };

        var statchange = function statchange(stat) {
            var total = stat.getTotal();
            if (total !== _this.state.total) {
                _this.setState({ total: total });
            }
        };
        _this.core.on(Events.QUEUE_STAT_CHANGE, statchange);
        _this.stopListen = function () {
            _this.core.off(Events.QUEUE_STAT_CHANGE, statchange);
        };
        return _this;
    }

    Uploader.prototype.componentWillUnmount = function componentWillUnmount() {
        this.stopListen && this.stopListen();
    };

    Uploader.prototype.reset = function reset() {
        this.core.getFiles().forEach(function (file) {
            file.cancel();
        });
    };

    Uploader.prototype.render = function render() {
        var me = this;
        var _props = this.props;
        var children = _props.children;
        var locale = _props.locale;

        if (!children || children.length < 1) {
            children = React.createElement(
                'button',
                { className: 'kuma-upload-button' },
                React.createElement('i', { className: 'kuma-icon kuma-icon-uploading' }),
                i18n[locale]['upload_files']
            );
        }
        return React.createElement(
            'div',
            { className: "kuma-uploader " + (this.props.className || '') },
            React.createElement(
                Picker,
                { core: this.core },
                children
            ),
            this.props.tips,
            this.state.total > 0 ? React.createElement(FileList, { locale: this.props.locale, core: this.core, mode: 'nw' }) : null
        );
    };

    return Uploader;
}(React.Component);

var Dropzoom = function (_React$Component2) {
    _inherits(Dropzoom, _React$Component2);

    function Dropzoom(props) {
        _classCallCheck(this, Dropzoom);

        var _this2 = _possibleConstructorReturn(this, _React$Component2.call(this, props));

        _this2.core = getCoreInstance(_this2.props);

        _this2.state = {
            blink: 0,
            highlight: 0,
            total: _this2.core.getTotal()
        };

        var statchange = function statchange(stat) {
            var total = stat.getTotal();
            if (total !== _this2.state.total) {
                _this2.setState({ total: total });
            }
        };
        _this2.core.on(Events.QUEUE_STAT_CHANGE, statchange);
        _this2.stopListen = function () {
            _this2.core.off(Events.QUEUE_STAT_CHANGE, statchange);
        };
        return _this2;
    }

    Dropzoom.prototype.reset = function reset() {
        this.core.getFiles().forEach(function (file) {
            file.cancel();
        });
    };

    Dropzoom.prototype.componentDidMount = function componentDidMount() {
        var _this3 = this;

        var areaNode = ReactDOM.findDOMNode(this);

        var dndArea = this.core.getDndCollector().addArea(areaNode);
        dndArea.on('start', function () {
            _this3.setState({ blink: 1 });
        }).on('response', function (e) {
            if (areaNode.contains(e.target)) {
                _this3.setState({ highlight: 1 });
            } else {
                _this3.setState({ highlight: 0 });
            }
        }).on('end', function () {
            _this3.setState({ blink: 0, highlight: 0 });
        });
        this.dndArea = dndArea;
    };

    Dropzoom.prototype.componentWillUnmount = function componentWillUnmount() {
        this.dndArea && this.dndArea.destroy();
        this.stopListen && this.stopListen();
    };

    Dropzoom.prototype.render = function render() {
        var className = "kuma-uploader kuma-upload-dropzoom";
        if (this.props.className) {
            className += ' ' + this.props.className;
        }
        if (this.state.blink) {
            className += ' blink';
        }
        if (this.state.highlight) {
            className += ' enter';
        }
        var children = this.props.children;
        if (!children || children.length < 1) {
            children = React.createElement('i', { className: 'kuma-icon kuma-icon-add' });
        }
        return React.createElement(
            'div',
            { className: className },
            this.state.total > 0 ? React.createElement(FileList, { locale: this.props.locale, core: this.core, mode: 'icon' }) : React.createElement(
                Picker,
                { core: this.core },
                children
            ),
            React.createElement('div', { className: 'kuma-upload-responser' })
        );
    };

    return Dropzoom;
}(React.Component);

Uploader.Dropzoom = Dropzoom;

Uploader.Events = Events;
Uploader.Status = Status;
Uploader.setSWF = function (swf) {
    UploadCore.setSWF(swf);
};

Uploader.displayName = "Uploader";

Uploader.defaultProps = {
    locale: 'zh-cn'
};

Uploader.propTypes = {
    locale: React.PropTypes.string
};

module.exports = Uploader;