'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var ReactDOM = require('react-dom');
var util = require('./util');

var Progress = function (_React$Component) {
    _inherits(Progress, _React$Component);

    function Progress(props) {
        _classCallCheck(this, Progress);

        return _possibleConstructorReturn(this, _React$Component.call(this, props));
    }

    Progress.prototype.render = function render() {
        var percentage = this.props.percentage || 0;
        if (util.TRANSFORM_PROPERTY && this.props.mode !== 'bar') {
            var items = [0, 1];
            var ret = items.map(function (i) {
                return Math.floor(Math.min(Math.max(0, (percentage - i * 50) * 3.6), 180));
            }).map(function (rotate) {
                var _ref;

                return _ref = {}, _ref[util.TRANSFORM_PROPERTY] = 'rotate(' + rotate + 'deg)', _ref;
            });

            return React.createElement(
                'div',
                { className: 'kuma-upload-progresspin' },
                React.createElement(
                    'div',
                    { className: 'spin spin2-1' },
                    React.createElement('div', { className: 'inner', style: ret[0] })
                ),
                React.createElement(
                    'div',
                    { className: 'spin spin2-2' },
                    React.createElement('div', { className: 'inner', style: ret[1] })
                )
            );
        } else {
            return React.createElement('div', { className: 'kuma-upload-progressbar', style: { width: percentage + '%' } });
        }
    };

    return Progress;
}(React.Component);

Progress.isSupport = util.TRANSFORM_PROPERTY !== false;

Progress.propTypes = {
    percentage: React.PropTypes.number
};
Progress.defaultProps = {
    percentage: 0
};

module.exports = Progress;