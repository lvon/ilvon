'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var ReactDOM = require('react-dom');

var Preview = function (_React$Component) {
    _inherits(Preview, _React$Component);

    function Preview(props) {
        _classCallCheck(this, Preview);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {};

        var file = _this.props.file;
        if (file.isImage()) {
            file.getAsDataUrl(1000).done(function (url) {
                return _this.setState({ url: url });
            });
        }
        return _this;
    }

    Preview.prototype.render = function render() {
        return React.createElement(
            'div',
            { className: 'previewer' },
            this.state.url ? React.createElement('img', { src: this.state.url }) : React.createElement('i', { className: 'kuma-upload-fileicon', 'data-ext': this.props.file.ext, 'data-type': this.props.file.type })
        );
    };

    return Preview;
}(React.Component);

module.exports = Preview;