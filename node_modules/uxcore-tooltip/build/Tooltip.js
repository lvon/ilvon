'use strict';

exports.__esModule = true;

var _rcTooltip = require('rc-tooltip');

var _rcTooltip2 = _interopRequireDefault(_rcTooltip);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tooltip = function (_RcTooltip) {
	_inherits(Tooltip, _RcTooltip);

	function Tooltip(props) {
		_classCallCheck(this, Tooltip);

		return _possibleConstructorReturn(this, _RcTooltip.call(this, props));
	}

	return Tooltip;
}(_rcTooltip2["default"]);

exports["default"] = Tooltip;

Tooltip.displayName = 'uxcore-tooltip';
Tooltip.propTypes = _rcTooltip2["default"].propTypes;

Tooltip.defaultProps = (0, _objectAssign2["default"])(_rcTooltip2["default"].defaultProps, {
	prefixCls: 'kuma-tooltip',
	overlayClassName: 'uxcore'
});
module.exports = exports['default'];