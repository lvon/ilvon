'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Totop Component for uxcore
 * @author eternaslky
 *
 * Copyright 2014-2015, Uxcore Team, Alinw.
 * All rights reserved.
 */

var classnames = require('classnames');
var React = require('react');
var ReactDOM = require('react-dom');

var Totop = function (_React$Component) {
    _inherits(Totop, _React$Component);

    function Totop(props) {
        _classCallCheck(this, Totop);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            showTotop: false
        };
        return _this;
    }

    Totop.prototype.componentDidMount = function componentDidMount() {
        var me = this;
        $(window).on("scroll.totop", function (e) {
            var y = window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
            if (y > me.props.distance && !me.state.showTotop) {
                me.setState({
                    showTotop: true
                });
            } else if (y <= me.props.distance && me.state.showTotop) {
                me.setState({
                    showTotop: false
                });
            }
        });
    };

    Totop.prototype.componentWillUnmount = function componentWillUnmount() {
        var me = this;
        clearTimeout(me.timer);
        $(window).off("scroll.totop");
    };

    /*
     * scroll method to action like jQuery animation.
     * @param element {DOM} scroll element
     * @param to {number} the final scrollTop you want
     * @param duration {number} scroll animation time (ms)
     */

    Totop.prototype.scrollTo = function scrollTo(element, to, duration) {
        var me = this;
        if (duration <= 0) return;
        var difference = to - element.scrollTop;
        var perTick = difference / duration * 10;

        me.timer = setTimeout(function () {
            element.scrollTop = element.scrollTop + perTick;
            if (element.scrollTop === to) return;
            me.scrollTo(element, to, duration - 10);
        }, 10);
    };

    Totop.prototype.handleGotopClick = function handleGotopClick() {
        var me = this;
        me.scrollTo(document.body.scrollTop != 0 ? document.body : document.documentElement, me.props.to, me.props.duration);
    };

    Totop.prototype.render = function render() {
        var _classnames, _classnames2;

        var me = this;
        var showCls = me.props.prefixCls;
        return React.createElement(
            'div',
            { className: classnames((_classnames = {}, _classnames[me.props.prefixCls] = true, _classnames[me.props.className] = !!me.props.className, _classnames[me.props.theme] = !!me.props.theme, _classnames["fn-clear"] = true, _classnames)) },
            React.createElement('a', { className: classnames({
                    "btn gotop": true,
                    "show": me.state.showTotop
                }), onClick: me.handleGotopClick.bind(me) }),
            React.createElement(
                'div',
                { className: classnames((_classnames2 = {}, _classnames2[me.props.prefixCls + "-other"] = true, _classnames2)) },
                me.props.children
            )
        );
    };

    return Totop;
}(React.Component);

Totop.defaultProps = {
    prefixCls: 'kuma-totop',
    to: 10,
    duration: 600,
    distance: 30
};

// http://facebook.github.io/react/docs/reusable-components.html
Totop.propTypes = {
    prefixCls: React.PropTypes.string,
    className: React.PropTypes.string,
    to: React.PropTypes.number,
    distance: React.PropTypes.number,
    duration: React.PropTypes.number,
    theme: React.PropTypes.string
};

Totop.displayName = "Totop";

module.exports = Totop;