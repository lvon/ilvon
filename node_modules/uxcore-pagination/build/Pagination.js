'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Forked from project rc-pagination
 * @maintainer eternalsky
 */

var Select = require('uxcore-select2');
var Pager = require('./Pager');
var Options = require('./Options');
var KEYCODE = require('./KeyCode');
var React = require('react');
var ReactDOM = require('react-dom');
var i18n = require('./locale');

function noop() {}

var Pagination = function (_React$Component) {
  _inherits(Pagination, _React$Component);

  function Pagination(props) {
    _classCallCheck(this, Pagination);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      current: props.current,
      _current: props.current,
      pageSize: props.pageSize
    };

    ['render', '_handleChange', '_handleKeyUp', '_handleKeyDown', '_changePageSize', '_isValid', '_prev', '_next', '_hasPrev', '_hasNext', '_jumpPrev', '_jumpNext'].forEach(function (method) {
      return _this[method] = _this[method].bind(_this);
    });
    return _this;
  }

  Pagination.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.current != this.props.current) {
      this.setState({
        current: nextProps.current,
        _current: nextProps.current
      });
    }

    if (nextProps.pageSize != this.props.pageSize) {
      this.setState({
        pageSize: nextProps.pageSize
      });
    }
  };

  Pagination.prototype.renderTotal = function renderTotal() {
    var prefix = this.props.locale == 'zh-cn' ? "å…±" : "";
    if (this.props.showTotal) {
      return React.createElement(
        'li',
        { className: this.props.prefixCls + "-total" },
        prefix + this.props.total + i18n[this.props.locale]['item']
      );
    }
  };

  Pagination.prototype.render = function render() {
    var props = this.props;

    var prefixCls = props.prefixCls;
    var allPages = this._calcPage();
    var pagerList = [];
    var jumpPrev = null;
    var jumpNext = null;
    var firstPager = null;
    var lastPager = null;

    if (props.simple) {
      return React.createElement(
        'ul',
        { className: prefixCls + ' ' + prefixCls + '-simple ' + props.className },
        React.createElement(
          'div',
          { title: 'Page ' + this.state.current + ' of ' + allPages, className: prefixCls + '-simple-pager' },
          React.createElement(
            'span',
            { className: prefixCls + '-current' },
            this.state._current
          ),
          React.createElement(
            'span',
            { className: prefixCls + '-slash' },
            '/'
          ),
          allPages
        ),
        React.createElement(
          'li',
          { title: 'Previous Page', onClick: this._prev, className: (this._hasPrev() ? '' : prefixCls + '-disabled ') + (prefixCls + '-prev') },
          React.createElement('a', { className: 'kuma-icon kuma-icon-chevron-left' })
        ),
        React.createElement(
          'li',
          { title: 'Next Page', onClick: this._next, className: (this._hasNext() ? '' : prefixCls + '-disabled ') + (prefixCls + '-next') },
          React.createElement('a', { className: 'kuma-icon kuma-icon-chevron-right' })
        )
      );
    }

    if (allPages <= 9) {
      for (var i = 1; i <= allPages; i++) {
        var active = this.state.current === i;
        pagerList.push(React.createElement(Pager, { rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, i), key: i, page: i, active: active }));
      }
    } else {
      jumpPrev = React.createElement(
        'li',
        { title: 'Previous 5 Page', key: 'prev', onClick: this._jumpPrev, className: prefixCls + '-jump-prev' },
        React.createElement('a', null)
      );
      jumpNext = React.createElement(
        'li',
        { title: 'Next 5 Page', key: 'next', onClick: this._jumpNext, className: prefixCls + '-jump-next' },
        React.createElement('a', null)
      );
      lastPager = React.createElement(Pager, { last: true, rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, allPages), key: allPages, page: allPages, active: false });
      firstPager = React.createElement(Pager, { rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, 1), key: 1, page: 1, active: false });

      var current = this.state.current;

      var left = Math.max(1, current - 2);
      var right = Math.min(current + 2, allPages);

      if (current - 1 <= 2) {
        right = 1 + 4;
      }

      if (allPages - current <= 2) {
        left = allPages - 4;
      }

      for (var _i = left; _i <= right; _i++) {
        var _active = current === _i;
        pagerList.push(React.createElement(Pager, { rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, _i), key: _i, page: _i, active: _active }));
      }

      if (current - 1 >= 4) {
        pagerList.unshift(jumpPrev);
      }
      if (allPages - current >= 4) {
        pagerList.push(jumpNext);
      }

      if (left !== 1) {
        pagerList.unshift(firstPager);
      }
      if (right !== allPages) {
        pagerList.push(lastPager);
      }
    }

    return React.createElement(
      'ul',
      { className: prefixCls + ' ' + props.className,
        unselectable: 'unselectable' },
      React.createElement(
        'li',
        { title: 'Previous Page', onClick: this._prev, className: (this._hasPrev() ? '' : prefixCls + '-disabled ') + (prefixCls + '-prev') },
        React.createElement('a', { className: 'kuma-icon kuma-icon-chevron-left' })
      ),
      pagerList,
      React.createElement(
        'li',
        { title: 'Next Page', onClick: this._next, className: (this._hasNext() ? '' : prefixCls + '-disabled ') + (prefixCls + '-next') },
        React.createElement('a', { className: 'kuma-icon kuma-icon-chevron-right' })
      ),
      this.renderTotal(),
      React.createElement(Options, { rootPrefixCls: prefixCls,
        locale: props.locale,
        selectComponentClass: props.selectComponentClass,
        selectPrefixCls: props.selectPrefixCls,
        changeSize: this.props.showSizeChanger ? this._changePageSize.bind(this) : null,
        current: this.state.current,
        pageSize: props.pageSize,
        sizeOptions: props.sizeOptions,
        quickGo: this.props.showQuickJumper ? this._handleChange.bind(this) : null })
    );
  };

  // private methods

  Pagination.prototype._calcPage = function _calcPage(p) {
    var pageSize = p;
    if (typeof pageSize === 'undefined') {
      pageSize = this.state.pageSize;
    }
    return Math.floor((this.props.total - 1) / pageSize) + 1;
  };

  Pagination.prototype._isValid = function _isValid(page) {
    return typeof page === 'number' && page >= 1 && page !== this.state.current;
  };

  Pagination.prototype._handleKeyDown = function _handleKeyDown(evt) {
    if (evt.keyCode === KEYCODE.ARROW_UP || evt.keyCode === KEYCODE.ARROW_DOWN) {
      evt.preventDefault();
    }
  };

  Pagination.prototype._handleKeyUp = function _handleKeyUp(evt) {
    var _val = evt.target.value;
    var val = void 0;

    if (_val === '') {
      val = _val;
    } else if (isNaN(Number(_val))) {
      val = this.state._current;
    } else {
      val = Number(_val);
    }

    this.setState({
      _current: val
    });

    if (evt.keyCode === KEYCODE.ENTER) {
      this._handleChange(val);
    } else if (evt.keyCode === KEYCODE.ARROW_UP) {
      this._handleChange(val - 1);
    } else if (evt.keyCode === KEYCODE.ARROW_DOWN) {
      this._handleChange(val + 1);
    }
  };

  Pagination.prototype._changePageSize = function _changePageSize(size) {
    if (typeof size === 'number') {
      var current = this.state.current;

      this.setState({
        pageSize: size
      });

      if (this.state.current > this._calcPage(size)) {
        current = this._calcPage(size);
        this.setState({
          current: current,
          _current: current
        });
      }

      this.props.onShowSizeChange(current, size);
    }
  };

  Pagination.prototype._handleChange = function _handleChange(p) {
    var page = p;
    var me = this;
    if (this._isValid(page)) {
      if (page > this._calcPage()) {
        page = this._calcPage();
      }
      this.setState({
        current: page,
        _current: page
      }, function () {
        me.props.onChange(page);
      });

      return page;
    }

    return this.state.current;
  };

  Pagination.prototype._prev = function _prev() {
    if (this._hasPrev()) {
      this._handleChange(this.state.current - 1);
    }
  };

  Pagination.prototype._next = function _next() {
    if (this._hasNext()) {
      this._handleChange(this.state.current + 1);
    }
  };

  Pagination.prototype._jumpPrev = function _jumpPrev() {
    this._handleChange(Math.max(1, this.state.current - 5));
  };

  Pagination.prototype._jumpNext = function _jumpNext() {
    this._handleChange(Math.min(this._calcPage(), this.state.current + 5));
  };

  Pagination.prototype._hasPrev = function _hasPrev() {
    return this.state.current > 1;
  };

  Pagination.prototype._hasNext = function _hasNext() {
    return this.state.current < this._calcPage();
  };

  return Pagination;
}(React.Component);

Pagination.propTypes = {
  current: React.PropTypes.number,
  total: React.PropTypes.number,
  locale: React.PropTypes.string,
  showTotal: React.PropTypes.bool,
  pageSize: React.PropTypes.number,
  sizeOptions: React.PropTypes.array,
  onChange: React.PropTypes.func,
  showSizeChanger: React.PropTypes.bool,
  onShowSizeChange: React.PropTypes.func,
  selectComponentClass: React.PropTypes.func,
  showQuickJumper: React.PropTypes.bool
};

Pagination.defaultProps = {
  current: 1,
  total: 0,
  locale: 'zh-cn',
  showTotal: false,
  pageSize: 10,
  sizeOptions: [10, 20, 30, 40],
  onChange: noop,
  className: '',
  selectPrefixCls: 'kuma-select2',
  prefixCls: 'kuma-page',
  selectComponentClass: Select,
  showQuickJumper: false,
  showSizeChanger: false,
  onShowSizeChange: noop
};

Pagination.displayName = 'Pagination';

module.exports = Pagination;