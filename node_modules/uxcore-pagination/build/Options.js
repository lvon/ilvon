'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var ReactDOM = require('react-dom');
var KEYCODE = require('./KeyCode');
var i18n = require('./locale');

var Options = function (_React$Component) {
  _inherits(Options, _React$Component);

  function Options(props) {
    _classCallCheck(this, Options);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      current: props.current,
      _current: props.current
    };

    ['_handleChange', '_changeSize', '_go'].forEach(function (method) {
      return _this[method] = _this[method].bind(_this);
    });
    return _this;
  }

  Options.prototype.render = function render() {
    var _this2 = this;

    var props = this.props;
    var state = this.state;
    var prefixCls = props.rootPrefixCls + '-options';
    var sizeOptions = props.sizeOptions;
    var pageSize = props.pageSize;
    var changeSize = props.changeSize;
    var quickGo = props.quickGo;
    var Select = props.selectComponentClass;
    var changeSelect = null;
    var goInput = null;

    if (!(changeSize || quickGo)) {
      return null;
    }

    if (changeSize && Select) {
      (function () {
        var Option = Select.Option;
        changeSelect = React.createElement(
          Select,
          {
            prefixCls: props.selectPrefixCls, showSearch: false,
            className: prefixCls + '-size-changer',
            optionLabelProp: 'children',
            dropdownClassName: prefixCls + '-size-changer-dropdown',
            defaultValue: sizeOptions.indexOf(pageSize) == -1 ? sizeOptions[0] + "" : pageSize + "",
            onChange: _this2._changeSize },
          sizeOptions.map(function (option, index) {
            return React.createElement(
              Option,
              { key: option, value: option + "" },
              option + i18n[props.locale]['items_per_page']
            );
          })
        );
      })();
    }

    if (quickGo) {
      goInput = React.createElement(
        'div',
        { title: 'Quick jump to page', className: prefixCls + '-quick-jumper' },
        i18n[props.locale]['jump_to'],
        React.createElement('input', { type: 'text', value: state._current, onChange: this._handleChange.bind(this), onKeyUp: this._go.bind(this) }),
        i18n[props.locale]['page']
      );
    }

    return React.createElement(
      'div',
      { className: '' + prefixCls },
      changeSelect,
      goInput
    );
  };

  Options.prototype._changeSize = function _changeSize(value) {
    this.props.changeSize(Number(value));
  };

  Options.prototype._handleChange = function _handleChange(evt) {
    var _val = evt.target.value;

    this.setState({
      _current: _val
    });
  };

  Options.prototype._go = function _go(e) {
    var _val = e.target.value;
    if (_val === '') {
      return;
    }
    var val = Number(this.state._current);
    if (isNaN(val)) {
      val = this.state.current;
    }
    if (e.keyCode === KEYCODE.ENTER) {
      var c = this.props.quickGo(val);
      this.setState({
        _current: c,
        current: c
      });
    }
  };

  return Options;
}(React.Component);

Options.propTypes = {
  changeSize: React.PropTypes.func,
  quickGo: React.PropTypes.func,
  selectComponentClass: React.PropTypes.func,
  current: React.PropTypes.number
};

module.exports = Options;