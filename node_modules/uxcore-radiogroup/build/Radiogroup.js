'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
* thanks for https://github.com/chenglou/react-radio-group
* @author: zhouquan.yezq
* @time  : 5/25 2015
*/

var React = require('react');
var ReactDOM = require('react-dom');
var Item = require('./RadiogroupItem');
var classnames = require("classnames");

var Radiogroup = function (_React$Component) {
    _inherits(Radiogroup, _React$Component);

    function Radiogroup(props) {
        _classCallCheck(this, Radiogroup);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

        _this.state = {
            defaultValue: props.defaultValue
        };
        return _this;
    }

    Radiogroup.prototype._handleChange = function _handleChange(value) {
        var me = this;
        me.props.onChange(value);
    };

    Radiogroup.prototype._processChild = function _processChild() {
        var me = this;
        var length = React.Children.count(me.props.children);
        if (!length) return false;
        var elements = React.Children.map(me.props.children, function (child, index) {
            if (!!child.type && child.type.displayName == "RadiogroupItem") {
                return React.cloneElement(child, {
                    onChange: me._handleChange.bind(me),
                    key: index,
                    checked: me.props.value == child.props.value
                });
            }
        });
        return elements;
    };

    Radiogroup.prototype.render = function render() {
        var _classnames;

        var me = this;
        return React.createElement(
            'div',
            { className: classnames((_classnames = {
                    "kuma-radio-group": true
                }, _classnames[me.props.className] = !!me.props.className, _classnames)) },
            me._processChild()
        );
    };

    return Radiogroup;
}(React.Component);

Radiogroup.displayName = "Radiogroup";
Radiogroup.propTypes = {
    value: React.PropTypes.string,
    onChange: React.PropTypes.func
};
Radiogroup.defaultProps = {
    value: "",
    onChange: function onChange() {}
};

Radiogroup.Item = Item;

module.exports = Radiogroup;